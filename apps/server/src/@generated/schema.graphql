# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Profile {
  userId: String!
  username: String!
  lastInteractGuildName: String!
  avatarUrl: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type MusicCount {
  playlist: Int!
}

type Music {
  videoId: ID!
  title: String!
  shortDescription: String!
  lengthSeconds: Int!
  viewCount: Int!
  authorName: String!
  authorChannelUrl: String!
  thumbnailUrl: String!
  likes: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  playlist: [Playlist!]
  _count: MusicCount!
}

type PlaylistCount {
  music: Int!
}

type Playlist {
  id: ID!
  name: String!
  description: String
  ownerId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  owner: User!
  music: [Music!]
  _count: PlaylistCount!
}

type TodoItem {
  id: ID!
  title: String!
  description: String!
  color: String!
  todoListId: Int
  createdAt: DateTime!
  updatedAt: DateTime!
  todoList: TodoList
}

type TodoListCount {
  todoItems: Int!
  collaborators: Int!
}

type TodoList {
  id: ID!
  name: String!
  description: String!
  ownerId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  todoItems: [TodoItem!]
  owner: User!
  collaborators: [User!]
  _count: TodoListCount!
}

type UserCount {
  playlist: Int!
  todoListsOwned: Int!
  todoListsCollaborated: Int!
}

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  profile: Profile
  playlist: [Playlist!]
  accessToken: AccessToken
  todoListsOwned: [TodoList!]
  todoListsCollaborated: [TodoList!]
  _count: UserCount!
}

type AccessToken {
  token: String!
  issued: DateTime!
  expire: DateTime!
  userId: String!
  user: User!
}

type Query {
  version: String!
  viewerIsGay: Boolean!
  accessTokens(where: AccessTokenWhereInput, orderBy: [AccessTokenOrderByWithRelationInput!], cursor: AccessTokenWhereUniqueInput, take: Int, skip: Int, distinct: [AccessTokenScalarFieldEnum!]): [AccessToken!]!
  musics: [Music!]!
  music(where: MusicWhereUniqueInput!): Music
  playlists(where: PlaylistWhereInput, orderBy: [PlaylistOrderByWithRelationInput!], cursor: PlaylistWhereUniqueInput, take: Int, skip: Int, distinct: [PlaylistScalarFieldEnum!]): [Playlist!]!
  playlist(where: PlaylistWhereUniqueInput!): Playlist
  profiles(where: ProfileWhereInput, orderBy: [ProfileOrderByWithRelationInput!], cursor: ProfileWhereUniqueInput, take: Int, skip: Int, distinct: [ProfileScalarFieldEnum!]): [Profile!]!
  profile(where: ProfileWhereUniqueInput!): Profile
  todoItems(where: TodoItemWhereInput, orderBy: [TodoItemOrderByWithRelationInput!], cursor: TodoItemWhereUniqueInput, take: Int, skip: Int, distinct: [TodoItemScalarFieldEnum!]): [TodoItem!]!
  todoItem(where: TodoItemWhereUniqueInput!): TodoItem
  todoLists(where: TodoListWhereInput, orderBy: [TodoListOrderByWithRelationInput!], cursor: TodoListWhereUniqueInput, take: Int, skip: Int, distinct: [TodoListScalarFieldEnum!]): [TodoList!]!
  todoList(where: TodoListWhereUniqueInput!): TodoList
  users: [User!]!
  user(where: UserWhereUniqueInput!): User
  me: User!
}

input AccessTokenWhereInput {
  AND: [AccessTokenWhereInput!]
  OR: [AccessTokenWhereInput!]
  NOT: [AccessTokenWhereInput!]
  token: StringFilter
  issued: DateTimeFilter
  expire: DateTimeFilter
  userId: StringFilter
  user: UserRelationFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  profile: ProfileRelationFilter
  playlist: PlaylistListRelationFilter
  accessToken: AccessTokenRelationFilter
  todoListsOwned: TodoListListRelationFilter
  todoListsCollaborated: TodoListListRelationFilter
}

input ProfileRelationFilter {
  is: ProfileWhereInput
  isNot: ProfileWhereInput
}

input ProfileWhereInput {
  AND: [ProfileWhereInput!]
  OR: [ProfileWhereInput!]
  NOT: [ProfileWhereInput!]
  userId: StringFilter
  username: StringFilter
  lastInteractGuildName: StringFilter
  avatarUrl: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
}

input PlaylistListRelationFilter {
  every: PlaylistWhereInput
  some: PlaylistWhereInput
  none: PlaylistWhereInput
}

input PlaylistWhereInput {
  AND: [PlaylistWhereInput!]
  OR: [PlaylistWhereInput!]
  NOT: [PlaylistWhereInput!]
  id: IntFilter
  name: StringFilter
  description: StringNullableFilter
  ownerId: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  owner: UserRelationFilter
  music: MusicListRelationFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input NestedIntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input MusicListRelationFilter {
  every: MusicWhereInput
  some: MusicWhereInput
  none: MusicWhereInput
}

input MusicWhereInput {
  AND: [MusicWhereInput!]
  OR: [MusicWhereInput!]
  NOT: [MusicWhereInput!]
  videoId: StringFilter
  title: StringFilter
  shortDescription: StringFilter
  lengthSeconds: IntFilter
  viewCount: IntFilter
  authorName: StringFilter
  authorChannelUrl: StringFilter
  thumbnailUrl: StringFilter
  likes: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  playlist: PlaylistListRelationFilter
}

input AccessTokenRelationFilter {
  is: AccessTokenWhereInput
  isNot: AccessTokenWhereInput
}

input TodoListListRelationFilter {
  every: TodoListWhereInput
  some: TodoListWhereInput
  none: TodoListWhereInput
}

input TodoListWhereInput {
  AND: [TodoListWhereInput!]
  OR: [TodoListWhereInput!]
  NOT: [TodoListWhereInput!]
  id: IntFilter
  name: StringFilter
  description: StringFilter
  ownerId: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  todoItems: TodoItemListRelationFilter
  owner: UserRelationFilter
  collaborators: UserListRelationFilter
}

input TodoItemListRelationFilter {
  every: TodoItemWhereInput
  some: TodoItemWhereInput
  none: TodoItemWhereInput
}

input TodoItemWhereInput {
  AND: [TodoItemWhereInput!]
  OR: [TodoItemWhereInput!]
  NOT: [TodoItemWhereInput!]
  id: IntFilter
  title: StringFilter
  description: StringFilter
  color: StringFilter
  todoListId: IntNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  todoList: TodoListRelationFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input NestedIntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input TodoListRelationFilter {
  is: TodoListWhereInput
  isNot: TodoListWhereInput
}

input UserListRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input AccessTokenOrderByWithRelationInput {
  token: SortOrder
  issued: SortOrder
  expire: SortOrder
  userId: SortOrder
  user: UserOrderByWithRelationInput
}

enum SortOrder {
  asc
  desc
}

input UserOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  profile: ProfileOrderByWithRelationInput
  playlist: PlaylistOrderByRelationAggregateInput
  accessToken: AccessTokenOrderByWithRelationInput
  todoListsOwned: TodoListOrderByRelationAggregateInput
  todoListsCollaborated: TodoListOrderByRelationAggregateInput
}

input ProfileOrderByWithRelationInput {
  userId: SortOrder
  username: SortOrder
  lastInteractGuildName: SortOrder
  avatarUrl: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
}

input PlaylistOrderByRelationAggregateInput {
  _count: SortOrder
}

input TodoListOrderByRelationAggregateInput {
  _count: SortOrder
}

input AccessTokenWhereUniqueInput {
  token: String
  userId: String
}

enum AccessTokenScalarFieldEnum {
  token
  issued
  expire
  userId
}

input MusicWhereUniqueInput {
  videoId: String
}

input PlaylistOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  description: SortOrder
  ownerId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  owner: UserOrderByWithRelationInput
  music: MusicOrderByRelationAggregateInput
}

input MusicOrderByRelationAggregateInput {
  _count: SortOrder
}

input PlaylistWhereUniqueInput {
  id: Int
}

enum PlaylistScalarFieldEnum {
  id
  name
  description
  ownerId
  createdAt
  updatedAt
}

input ProfileWhereUniqueInput {
  userId: String
}

enum ProfileScalarFieldEnum {
  userId
  username
  lastInteractGuildName
  avatarUrl
  createdAt
  updatedAt
}

input TodoItemOrderByWithRelationInput {
  id: SortOrder
  title: SortOrder
  description: SortOrder
  color: SortOrder
  todoListId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  todoList: TodoListOrderByWithRelationInput
}

input TodoListOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  description: SortOrder
  ownerId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  todoItems: TodoItemOrderByRelationAggregateInput
  owner: UserOrderByWithRelationInput
  collaborators: UserOrderByRelationAggregateInput
}

input TodoItemOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserOrderByRelationAggregateInput {
  _count: SortOrder
}

input TodoItemWhereUniqueInput {
  id: Int
}

enum TodoItemScalarFieldEnum {
  id
  title
  description
  color
  todoListId
  createdAt
  updatedAt
}

input TodoListWhereUniqueInput {
  id: Int
}

enum TodoListScalarFieldEnum {
  id
  name
  description
  ownerId
  createdAt
  updatedAt
}

input UserWhereUniqueInput {
  id: String
}

type Mutation {
  generateToken(where: UserWhereUniqueInput!): AccessToken!
  createMusic(data: MusicCreateInput!): Music!
  addMusicToPlaylist(url: String!, playlistId: Int!): Music!
  removeMusicFromPlaylist(playlistId: Int!, musicId: String!): Music!
  createPlaylist(data: PlaylistCreateInput!): Playlist!
  createUserPlaylist(data: PlaylistCreateWithoutOwnerInput!): Playlist!
  createProfile(data: ProfileCreateInput!): Profile!
  createTodoItem(data: TodoItemCreateInput!): TodoItem!
  createTodoList(data: TodoListAdminCreateInput!): TodoList!
  createUserTodoList(data: TodoListCreateInput!): TodoList!
  createUser(data: UserCreateInput!): User!
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User!
  upsertUser(data: UserUpsertInput!): User!
}

input MusicCreateInput {
  videoId: String!
  title: String!
  shortDescription: String!
  lengthSeconds: Int!
  viewCount: Int!
  authorName: String!
  authorChannelUrl: String!
  thumbnailUrl: String!
  likes: Int!
  createdAt: DateTime
  updatedAt: DateTime
  playlist: PlaylistCreateNestedManyWithoutMusicInput
}

input PlaylistCreateNestedManyWithoutMusicInput {
  create: [PlaylistCreateWithoutMusicInput!]
  connectOrCreate: [PlaylistCreateOrConnectWithoutMusicInput!]
  connect: [PlaylistWhereUniqueInput!]
}

input PlaylistCreateWithoutMusicInput {
  name: String!
  description: String
  createdAt: DateTime
  updatedAt: DateTime
  owner: UserCreateNestedOneWithoutPlaylistInput!
}

input UserCreateNestedOneWithoutPlaylistInput {
  create: UserCreateWithoutPlaylistInput
  connectOrCreate: UserCreateOrConnectWithoutPlaylistInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutPlaylistInput {
  id: String!
  createdAt: DateTime
  updatedAt: DateTime
  profile: ProfileCreateNestedOneWithoutUserInput
  accessToken: AccessTokenCreateNestedOneWithoutUserInput
  todoListsOwned: TodoListCreateNestedManyWithoutOwnerInput
  todoListsCollaborated: TodoListCreateNestedManyWithoutCollaboratorsInput
}

input ProfileCreateNestedOneWithoutUserInput {
  create: ProfileCreateWithoutUserInput
  connectOrCreate: ProfileCreateOrConnectWithoutUserInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateWithoutUserInput {
  username: String!
  lastInteractGuildName: String!
  avatarUrl: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input ProfileCreateOrConnectWithoutUserInput {
  where: ProfileWhereUniqueInput!
  create: ProfileCreateWithoutUserInput!
}

input AccessTokenCreateNestedOneWithoutUserInput {
  create: AccessTokenCreateWithoutUserInput
  connectOrCreate: AccessTokenCreateOrConnectWithoutUserInput
  connect: AccessTokenWhereUniqueInput
}

input AccessTokenCreateWithoutUserInput {
  token: String!
  issued: DateTime
  expire: DateTime!
}

input AccessTokenCreateOrConnectWithoutUserInput {
  where: AccessTokenWhereUniqueInput!
  create: AccessTokenCreateWithoutUserInput!
}

input TodoListCreateNestedManyWithoutOwnerInput {
  create: [TodoListCreateWithoutOwnerInput!]
  connectOrCreate: [TodoListCreateOrConnectWithoutOwnerInput!]
  createMany: TodoListCreateManyOwnerInputEnvelope
  connect: [TodoListWhereUniqueInput!]
}

input TodoListCreateWithoutOwnerInput {
  name: String!
  description: String!
  createdAt: DateTime
  updatedAt: DateTime
  todoItems: TodoItemCreateNestedManyWithoutTodoListInput
  collaborators: UserCreateNestedManyWithoutTodoListsCollaboratedInput
}

input TodoItemCreateNestedManyWithoutTodoListInput {
  create: [TodoItemCreateWithoutTodoListInput!]
  connectOrCreate: [TodoItemCreateOrConnectWithoutTodoListInput!]
  createMany: TodoItemCreateManyTodoListInputEnvelope
  connect: [TodoItemWhereUniqueInput!]
}

input TodoItemCreateWithoutTodoListInput {
  title: String!
  description: String!
  color: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input TodoItemCreateOrConnectWithoutTodoListInput {
  where: TodoItemWhereUniqueInput!
  create: TodoItemCreateWithoutTodoListInput!
}

input TodoItemCreateManyTodoListInputEnvelope {
  data: [TodoItemCreateManyTodoListInput!]!
  skipDuplicates: Boolean
}

input TodoItemCreateManyTodoListInput {
  id: Int
  title: String!
  description: String!
  color: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input UserCreateNestedManyWithoutTodoListsCollaboratedInput {
  create: [UserCreateWithoutTodoListsCollaboratedInput!]
  connectOrCreate: [UserCreateOrConnectWithoutTodoListsCollaboratedInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateWithoutTodoListsCollaboratedInput {
  id: String!
  createdAt: DateTime
  updatedAt: DateTime
  profile: ProfileCreateNestedOneWithoutUserInput
  playlist: PlaylistCreateNestedManyWithoutOwnerInput
  accessToken: AccessTokenCreateNestedOneWithoutUserInput
  todoListsOwned: TodoListCreateNestedManyWithoutOwnerInput
}

input PlaylistCreateNestedManyWithoutOwnerInput {
  create: [PlaylistCreateWithoutOwnerInput!]
  connectOrCreate: [PlaylistCreateOrConnectWithoutOwnerInput!]
  createMany: PlaylistCreateManyOwnerInputEnvelope
  connect: [PlaylistWhereUniqueInput!]
}

input PlaylistCreateWithoutOwnerInput {
  name: String!
  description: String
  createdAt: DateTime
  updatedAt: DateTime
  music: MusicCreateNestedManyWithoutPlaylistInput
}

input MusicCreateNestedManyWithoutPlaylistInput {
  create: [MusicCreateWithoutPlaylistInput!]
  connectOrCreate: [MusicCreateOrConnectWithoutPlaylistInput!]
  connect: [MusicWhereUniqueInput!]
}

input MusicCreateWithoutPlaylistInput {
  videoId: String!
  title: String!
  shortDescription: String!
  lengthSeconds: Int!
  viewCount: Int!
  authorName: String!
  authorChannelUrl: String!
  thumbnailUrl: String!
  likes: Int!
  createdAt: DateTime
  updatedAt: DateTime
}

input MusicCreateOrConnectWithoutPlaylistInput {
  where: MusicWhereUniqueInput!
  create: MusicCreateWithoutPlaylistInput!
}

input PlaylistCreateOrConnectWithoutOwnerInput {
  where: PlaylistWhereUniqueInput!
  create: PlaylistCreateWithoutOwnerInput!
}

input PlaylistCreateManyOwnerInputEnvelope {
  data: [PlaylistCreateManyOwnerInput!]!
  skipDuplicates: Boolean
}

input PlaylistCreateManyOwnerInput {
  id: Int
  name: String!
  description: String
  createdAt: DateTime
  updatedAt: DateTime
}

input UserCreateOrConnectWithoutTodoListsCollaboratedInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutTodoListsCollaboratedInput!
}

input TodoListCreateOrConnectWithoutOwnerInput {
  where: TodoListWhereUniqueInput!
  create: TodoListCreateWithoutOwnerInput!
}

input TodoListCreateManyOwnerInputEnvelope {
  data: [TodoListCreateManyOwnerInput!]!
  skipDuplicates: Boolean
}

input TodoListCreateManyOwnerInput {
  id: Int
  name: String!
  description: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input TodoListCreateNestedManyWithoutCollaboratorsInput {
  create: [TodoListCreateWithoutCollaboratorsInput!]
  connectOrCreate: [TodoListCreateOrConnectWithoutCollaboratorsInput!]
  connect: [TodoListWhereUniqueInput!]
}

input TodoListCreateWithoutCollaboratorsInput {
  name: String!
  description: String!
  createdAt: DateTime
  updatedAt: DateTime
  todoItems: TodoItemCreateNestedManyWithoutTodoListInput
  owner: UserCreateNestedOneWithoutTodoListsOwnedInput!
}

input UserCreateNestedOneWithoutTodoListsOwnedInput {
  create: UserCreateWithoutTodoListsOwnedInput
  connectOrCreate: UserCreateOrConnectWithoutTodoListsOwnedInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutTodoListsOwnedInput {
  id: String!
  createdAt: DateTime
  updatedAt: DateTime
  profile: ProfileCreateNestedOneWithoutUserInput
  playlist: PlaylistCreateNestedManyWithoutOwnerInput
  accessToken: AccessTokenCreateNestedOneWithoutUserInput
  todoListsCollaborated: TodoListCreateNestedManyWithoutCollaboratorsInput
}

input UserCreateOrConnectWithoutTodoListsOwnedInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutTodoListsOwnedInput!
}

input TodoListCreateOrConnectWithoutCollaboratorsInput {
  where: TodoListWhereUniqueInput!
  create: TodoListCreateWithoutCollaboratorsInput!
}

input UserCreateOrConnectWithoutPlaylistInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutPlaylistInput!
}

input PlaylistCreateOrConnectWithoutMusicInput {
  where: PlaylistWhereUniqueInput!
  create: PlaylistCreateWithoutMusicInput!
}

input PlaylistCreateInput {
  name: String!
  description: String
  createdAt: DateTime
  updatedAt: DateTime
  owner: UserCreateNestedOneWithoutPlaylistInput!
  music: MusicCreateNestedManyWithoutPlaylistInput
}

input ProfileCreateInput {
  username: String!
  lastInteractGuildName: String!
  avatarUrl: String!
  createdAt: DateTime
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutProfileInput!
}

input UserCreateNestedOneWithoutProfileInput {
  create: UserCreateWithoutProfileInput
  connectOrCreate: UserCreateOrConnectWithoutProfileInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutProfileInput {
  id: String!
  createdAt: DateTime
  updatedAt: DateTime
  playlist: PlaylistCreateNestedManyWithoutOwnerInput
  accessToken: AccessTokenCreateNestedOneWithoutUserInput
  todoListsOwned: TodoListCreateNestedManyWithoutOwnerInput
  todoListsCollaborated: TodoListCreateNestedManyWithoutCollaboratorsInput
}

input UserCreateOrConnectWithoutProfileInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutProfileInput!
}

input TodoItemCreateInput {
  title: String!
  description: String!
  color: String!
  todoListId: ID!
}

input TodoListAdminCreateInput {
  name: String!
  description: String!
  ownerId: String!
}

input TodoListCreateInput {
  name: String!
  description: String!
}

input UserCreateInput {
  id: String!
  createdAt: DateTime
  updatedAt: DateTime
  playlist: PlaylistCreateNestedManyWithoutOwnerInput
  accessToken: AccessTokenCreateNestedOneWithoutUserInput
  todoListsOwned: TodoListCreateNestedManyWithoutOwnerInput
  todoListsCollaborated: TodoListCreateNestedManyWithoutCollaboratorsInput
  profile: ProfileCreateWithoutUserInput
}

input UserUpdateInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  playlist: PlaylistUpdateManyWithoutOwnerNestedInput
  accessToken: AccessTokenUpdateOneWithoutUserNestedInput
  todoListsOwned: TodoListUpdateManyWithoutOwnerNestedInput
  todoListsCollaborated: TodoListUpdateManyWithoutCollaboratorsNestedInput
  profile: ProfileUpdateInput
}

input StringFieldUpdateOperationsInput {
  set: String
}

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input PlaylistUpdateManyWithoutOwnerNestedInput {
  create: [PlaylistCreateWithoutOwnerInput!]
  connectOrCreate: [PlaylistCreateOrConnectWithoutOwnerInput!]
  upsert: [PlaylistUpsertWithWhereUniqueWithoutOwnerInput!]
  createMany: PlaylistCreateManyOwnerInputEnvelope
  set: [PlaylistWhereUniqueInput!]
  disconnect: [PlaylistWhereUniqueInput!]
  delete: [PlaylistWhereUniqueInput!]
  connect: [PlaylistWhereUniqueInput!]
  update: [PlaylistUpdateWithWhereUniqueWithoutOwnerInput!]
  updateMany: [PlaylistUpdateManyWithWhereWithoutOwnerInput!]
  deleteMany: [PlaylistScalarWhereInput!]
}

input PlaylistUpsertWithWhereUniqueWithoutOwnerInput {
  where: PlaylistWhereUniqueInput!
  update: PlaylistUpdateWithoutOwnerInput!
  create: PlaylistCreateWithoutOwnerInput!
}

input PlaylistUpdateWithoutOwnerInput {
  name: StringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  music: MusicUpdateManyWithoutPlaylistNestedInput
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

input MusicUpdateManyWithoutPlaylistNestedInput {
  create: [MusicCreateWithoutPlaylistInput!]
  connectOrCreate: [MusicCreateOrConnectWithoutPlaylistInput!]
  upsert: [MusicUpsertWithWhereUniqueWithoutPlaylistInput!]
  set: [MusicWhereUniqueInput!]
  disconnect: [MusicWhereUniqueInput!]
  delete: [MusicWhereUniqueInput!]
  connect: [MusicWhereUniqueInput!]
  update: [MusicUpdateWithWhereUniqueWithoutPlaylistInput!]
  updateMany: [MusicUpdateManyWithWhereWithoutPlaylistInput!]
  deleteMany: [MusicScalarWhereInput!]
}

input MusicUpsertWithWhereUniqueWithoutPlaylistInput {
  where: MusicWhereUniqueInput!
  update: MusicUpdateWithoutPlaylistInput!
  create: MusicCreateWithoutPlaylistInput!
}

input MusicUpdateWithoutPlaylistInput {
  videoId: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  shortDescription: StringFieldUpdateOperationsInput
  lengthSeconds: IntFieldUpdateOperationsInput
  viewCount: IntFieldUpdateOperationsInput
  authorName: StringFieldUpdateOperationsInput
  authorChannelUrl: StringFieldUpdateOperationsInput
  thumbnailUrl: StringFieldUpdateOperationsInput
  likes: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input IntFieldUpdateOperationsInput {
  set: Int
  increment: Int
  decrement: Int
  multiply: Int
  divide: Int
}

input MusicUpdateWithWhereUniqueWithoutPlaylistInput {
  where: MusicWhereUniqueInput!
  data: MusicUpdateWithoutPlaylistInput!
}

input MusicUpdateManyWithWhereWithoutPlaylistInput {
  where: MusicScalarWhereInput!
  data: MusicUpdateManyMutationInput!
}

input MusicScalarWhereInput {
  AND: [MusicScalarWhereInput!]
  OR: [MusicScalarWhereInput!]
  NOT: [MusicScalarWhereInput!]
  videoId: StringFilter
  title: StringFilter
  shortDescription: StringFilter
  lengthSeconds: IntFilter
  viewCount: IntFilter
  authorName: StringFilter
  authorChannelUrl: StringFilter
  thumbnailUrl: StringFilter
  likes: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input MusicUpdateManyMutationInput {
  videoId: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  shortDescription: StringFieldUpdateOperationsInput
  lengthSeconds: IntFieldUpdateOperationsInput
  viewCount: IntFieldUpdateOperationsInput
  authorName: StringFieldUpdateOperationsInput
  authorChannelUrl: StringFieldUpdateOperationsInput
  thumbnailUrl: StringFieldUpdateOperationsInput
  likes: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PlaylistUpdateWithWhereUniqueWithoutOwnerInput {
  where: PlaylistWhereUniqueInput!
  data: PlaylistUpdateWithoutOwnerInput!
}

input PlaylistUpdateManyWithWhereWithoutOwnerInput {
  where: PlaylistScalarWhereInput!
  data: PlaylistUpdateManyMutationInput!
}

input PlaylistScalarWhereInput {
  AND: [PlaylistScalarWhereInput!]
  OR: [PlaylistScalarWhereInput!]
  NOT: [PlaylistScalarWhereInput!]
  id: IntFilter
  name: StringFilter
  description: StringNullableFilter
  ownerId: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input PlaylistUpdateManyMutationInput {
  name: StringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AccessTokenUpdateOneWithoutUserNestedInput {
  create: AccessTokenCreateWithoutUserInput
  connectOrCreate: AccessTokenCreateOrConnectWithoutUserInput
  upsert: AccessTokenUpsertWithoutUserInput
  disconnect: Boolean
  delete: Boolean
  connect: AccessTokenWhereUniqueInput
  update: AccessTokenUpdateWithoutUserInput
}

input AccessTokenUpsertWithoutUserInput {
  update: AccessTokenUpdateWithoutUserInput!
  create: AccessTokenCreateWithoutUserInput!
}

input AccessTokenUpdateWithoutUserInput {
  token: StringFieldUpdateOperationsInput
  issued: DateTimeFieldUpdateOperationsInput
  expire: DateTimeFieldUpdateOperationsInput
}

input TodoListUpdateManyWithoutOwnerNestedInput {
  create: [TodoListCreateWithoutOwnerInput!]
  connectOrCreate: [TodoListCreateOrConnectWithoutOwnerInput!]
  upsert: [TodoListUpsertWithWhereUniqueWithoutOwnerInput!]
  createMany: TodoListCreateManyOwnerInputEnvelope
  set: [TodoListWhereUniqueInput!]
  disconnect: [TodoListWhereUniqueInput!]
  delete: [TodoListWhereUniqueInput!]
  connect: [TodoListWhereUniqueInput!]
  update: [TodoListUpdateWithWhereUniqueWithoutOwnerInput!]
  updateMany: [TodoListUpdateManyWithWhereWithoutOwnerInput!]
  deleteMany: [TodoListScalarWhereInput!]
}

input TodoListUpsertWithWhereUniqueWithoutOwnerInput {
  where: TodoListWhereUniqueInput!
  update: TodoListUpdateWithoutOwnerInput!
  create: TodoListCreateWithoutOwnerInput!
}

input TodoListUpdateWithoutOwnerInput {
  name: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  todoItems: TodoItemUpdateManyWithoutTodoListNestedInput
  collaborators: UserUpdateManyWithoutTodoListsCollaboratedNestedInput
}

input TodoItemUpdateManyWithoutTodoListNestedInput {
  create: [TodoItemCreateWithoutTodoListInput!]
  connectOrCreate: [TodoItemCreateOrConnectWithoutTodoListInput!]
  upsert: [TodoItemUpsertWithWhereUniqueWithoutTodoListInput!]
  createMany: TodoItemCreateManyTodoListInputEnvelope
  set: [TodoItemWhereUniqueInput!]
  disconnect: [TodoItemWhereUniqueInput!]
  delete: [TodoItemWhereUniqueInput!]
  connect: [TodoItemWhereUniqueInput!]
  update: [TodoItemUpdateWithWhereUniqueWithoutTodoListInput!]
  updateMany: [TodoItemUpdateManyWithWhereWithoutTodoListInput!]
  deleteMany: [TodoItemScalarWhereInput!]
}

input TodoItemUpsertWithWhereUniqueWithoutTodoListInput {
  where: TodoItemWhereUniqueInput!
  update: TodoItemUpdateWithoutTodoListInput!
  create: TodoItemCreateWithoutTodoListInput!
}

input TodoItemUpdateWithoutTodoListInput {
  title: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  color: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TodoItemUpdateWithWhereUniqueWithoutTodoListInput {
  where: TodoItemWhereUniqueInput!
  data: TodoItemUpdateWithoutTodoListInput!
}

input TodoItemUpdateManyWithWhereWithoutTodoListInput {
  where: TodoItemScalarWhereInput!
  data: TodoItemUpdateManyMutationInput!
}

input TodoItemScalarWhereInput {
  AND: [TodoItemScalarWhereInput!]
  OR: [TodoItemScalarWhereInput!]
  NOT: [TodoItemScalarWhereInput!]
  id: IntFilter
  title: StringFilter
  description: StringFilter
  color: StringFilter
  todoListId: IntNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input TodoItemUpdateManyMutationInput {
  title: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  color: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateManyWithoutTodoListsCollaboratedNestedInput {
  create: [UserCreateWithoutTodoListsCollaboratedInput!]
  connectOrCreate: [UserCreateOrConnectWithoutTodoListsCollaboratedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutTodoListsCollaboratedInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutTodoListsCollaboratedInput!]
  updateMany: [UserUpdateManyWithWhereWithoutTodoListsCollaboratedInput!]
  deleteMany: [UserScalarWhereInput!]
}

input UserUpsertWithWhereUniqueWithoutTodoListsCollaboratedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutTodoListsCollaboratedInput!
  create: UserCreateWithoutTodoListsCollaboratedInput!
}

input UserUpdateWithoutTodoListsCollaboratedInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  profile: ProfileUpdateOneWithoutUserNestedInput
  playlist: PlaylistUpdateManyWithoutOwnerNestedInput
  accessToken: AccessTokenUpdateOneWithoutUserNestedInput
  todoListsOwned: TodoListUpdateManyWithoutOwnerNestedInput
}

input ProfileUpdateOneWithoutUserNestedInput {
  create: ProfileCreateWithoutUserInput
  connectOrCreate: ProfileCreateOrConnectWithoutUserInput
  upsert: ProfileUpsertWithoutUserInput
  disconnect: Boolean
  delete: Boolean
  connect: ProfileWhereUniqueInput
  update: ProfileUpdateWithoutUserInput
}

input ProfileUpsertWithoutUserInput {
  update: ProfileUpdateWithoutUserInput!
  create: ProfileCreateWithoutUserInput!
}

input ProfileUpdateWithoutUserInput {
  username: StringFieldUpdateOperationsInput
  lastInteractGuildName: StringFieldUpdateOperationsInput
  avatarUrl: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateWithWhereUniqueWithoutTodoListsCollaboratedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutTodoListsCollaboratedInput!
}

input UserUpdateManyWithWhereWithoutTodoListsCollaboratedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyMutationInput!
}

input UserScalarWhereInput {
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input UserUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TodoListUpdateWithWhereUniqueWithoutOwnerInput {
  where: TodoListWhereUniqueInput!
  data: TodoListUpdateWithoutOwnerInput!
}

input TodoListUpdateManyWithWhereWithoutOwnerInput {
  where: TodoListScalarWhereInput!
  data: TodoListUpdateManyMutationInput!
}

input TodoListScalarWhereInput {
  AND: [TodoListScalarWhereInput!]
  OR: [TodoListScalarWhereInput!]
  NOT: [TodoListScalarWhereInput!]
  id: IntFilter
  name: StringFilter
  description: StringFilter
  ownerId: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input TodoListUpdateManyMutationInput {
  name: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TodoListUpdateManyWithoutCollaboratorsNestedInput {
  create: [TodoListCreateWithoutCollaboratorsInput!]
  connectOrCreate: [TodoListCreateOrConnectWithoutCollaboratorsInput!]
  upsert: [TodoListUpsertWithWhereUniqueWithoutCollaboratorsInput!]
  set: [TodoListWhereUniqueInput!]
  disconnect: [TodoListWhereUniqueInput!]
  delete: [TodoListWhereUniqueInput!]
  connect: [TodoListWhereUniqueInput!]
  update: [TodoListUpdateWithWhereUniqueWithoutCollaboratorsInput!]
  updateMany: [TodoListUpdateManyWithWhereWithoutCollaboratorsInput!]
  deleteMany: [TodoListScalarWhereInput!]
}

input TodoListUpsertWithWhereUniqueWithoutCollaboratorsInput {
  where: TodoListWhereUniqueInput!
  update: TodoListUpdateWithoutCollaboratorsInput!
  create: TodoListCreateWithoutCollaboratorsInput!
}

input TodoListUpdateWithoutCollaboratorsInput {
  name: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  todoItems: TodoItemUpdateManyWithoutTodoListNestedInput
  owner: UserUpdateOneRequiredWithoutTodoListsOwnedNestedInput
}

input UserUpdateOneRequiredWithoutTodoListsOwnedNestedInput {
  create: UserCreateWithoutTodoListsOwnedInput
  connectOrCreate: UserCreateOrConnectWithoutTodoListsOwnedInput
  upsert: UserUpsertWithoutTodoListsOwnedInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutTodoListsOwnedInput
}

input UserUpsertWithoutTodoListsOwnedInput {
  update: UserUpdateWithoutTodoListsOwnedInput!
  create: UserCreateWithoutTodoListsOwnedInput!
}

input UserUpdateWithoutTodoListsOwnedInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  profile: ProfileUpdateOneWithoutUserNestedInput
  playlist: PlaylistUpdateManyWithoutOwnerNestedInput
  accessToken: AccessTokenUpdateOneWithoutUserNestedInput
  todoListsCollaborated: TodoListUpdateManyWithoutCollaboratorsNestedInput
}

input TodoListUpdateWithWhereUniqueWithoutCollaboratorsInput {
  where: TodoListWhereUniqueInput!
  data: TodoListUpdateWithoutCollaboratorsInput!
}

input TodoListUpdateManyWithWhereWithoutCollaboratorsInput {
  where: TodoListScalarWhereInput!
  data: TodoListUpdateManyMutationInput!
}

input ProfileUpdateInput {
  username: String!
  lastInteractGuildName: String!
  avatarUrl: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input UserUpsertInput {
  id: String!
  profile: ProfileUpdateInput!
}